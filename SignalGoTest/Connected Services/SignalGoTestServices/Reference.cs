// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.6.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
using SignalGo.Shared.DataTypes;
using System.Threading.Tasks;
using SignalGo.Shared.Models;
using System;
using System.Collections.Generic;
using System;
using SignalGoTest2Services.Interfaces;
using SignalGoTest2Services.ServerServices;
using SignalGoTest2Services.HttpServices;
using SignalGoTest2Services.ClientServices;
namespace SignalGoTest2Services.Interfaces
{

    [ServiceContract("testserverstreammodelstreamservice", ServiceType.StreamService, InstanceType.SingleInstance)]
    public partial interface ITestServerStreamModel
    {
        SignalGo.Shared.Models.StreamInfo<string> DownloadImage(string name, SignalGoTest2.Models.TestStreamModel testStreamModel);
        Task<SignalGo.Shared.Models.StreamInfo<string>> DownloadImageAsync(string name, SignalGoTest2.Models.TestStreamModel testStreamModel);
        string UploadImage(string name, SignalGo.Shared.Models.StreamInfo streamInfo, SignalGoTest2.Models.TestStreamModel testStreamModel);
        Task<string> UploadImageAsync(string name, SignalGo.Shared.Models.StreamInfo streamInfo, SignalGoTest2.Models.TestStreamModel testStreamModel);
    }
    [ServiceContract("testservermodelserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface ITestServerModel
    {
        string HelloWorld(string yourName);
        Task<string> HelloWorldAsync(string yourName);
        System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsers();
        Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersAsync();
        System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetPostsOfUser(int userId);
        Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetPostsOfUserAsync(int userId);
        System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsersCustom();
        Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersCustomAsync();
        System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetCustomPostsOfUser(int userId);
        Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetCustomPostsOfUserAsync(int userId);
        bool HelloBind(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3);
        Task<bool> HelloBindAsync(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3);
        bool Login(SignalGoTest2.Models.UserInfoTest userInfoTest);
        Task<bool> LoginAsync(SignalGoTest2.Models.UserInfoTest userInfoTest);
        string ServerAsyncMethod(string name);
        Task<string> ServerAsyncMethodAsync(string name);
        SignalGoTest2.Models.ArticleInfo AddArticle(SignalGoTest2.Models.ArticleInfo articleInfo);
        Task<SignalGoTest2.Models.ArticleInfo> AddArticleAsync(SignalGoTest2.Models.ArticleInfo articleInfo);
        SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo> AddArticleMessage(SignalGoTest2.Models.ArticleInfo articleInfo);
        Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>> AddArticleMessageAsync(SignalGoTest2.Models.ArticleInfo articleInfo);
        System.Tuple<bool> Logout(string yourName);
        Task<System.Tuple<bool>> LogoutAsync(string yourName);
    }
    [ServiceContract("authenticationserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IAuthenticationService
    {
        SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo> Login(string userName, string password);
        Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>> LoginAsync(string userName, string password);
        string WhatIsMyName();
        Task<string> WhatIsMyNameAsync();
        SignalGoTest2.Models.MessageContract AdminAccess();
        Task<SignalGoTest2.Models.MessageContract> AdminAccessAsync();
        SignalGoTest2.Models.MessageContract UserAccess();
        Task<SignalGoTest2.Models.MessageContract> UserAccessAsync();
        SignalGoTest2.Models.MessageContract GustAccess();
        Task<SignalGoTest2.Models.MessageContract> GustAccessAsync();
        SignalGoTest2.Models.MessageContract TestCallbacksSync();
        Task<SignalGoTest2.Models.MessageContract> TestCallbacksSyncAsync();
        SignalGoTest2.Models.MessageContract TestCallbacksAsync();
        Task<SignalGoTest2.Models.MessageContract> TestCallbacksAsyncAsync();
    }
}

namespace SignalGoTest2Services.ServerServices
{
    [ServiceContract("testservermodelserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class TestServerModel : ITestServerModel
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public TestServerModel(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public string HelloWorld(string yourName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<string>(CurrentProvider, ServiceName,"HelloWorld", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
        }
        public Task<string> HelloWorldAsync(string yourName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<string>(CurrentProvider, ServiceName,"HelloWorld", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsers()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(CurrentProvider, ServiceName,"GetListOfUsers", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(CurrentProvider, ServiceName,"GetListOfUsers", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetPostsOfUser(int userId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(CurrentProvider, ServiceName,"GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetPostsOfUserAsync(int userId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(CurrentProvider, ServiceName,"GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsersCustom()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(CurrentProvider, ServiceName,"GetListOfUsersCustom", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersCustomAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(CurrentProvider, ServiceName,"GetListOfUsersCustom", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetCustomPostsOfUser(int userId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(CurrentProvider, ServiceName,"GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetCustomPostsOfUserAsync(int userId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(CurrentProvider, ServiceName,"GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
        }
        public bool HelloBind(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<bool>(CurrentProvider, ServiceName,"HelloBind", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest2),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest3),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) },
                });
        }
        public Task<bool> HelloBindAsync(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<bool>(CurrentProvider, ServiceName,"HelloBind", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest2),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest3),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) },
                });
        }
        public bool Login(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<bool>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                });
        }
        public Task<bool> LoginAsync(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<bool>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                });
        }
        public string ServerAsyncMethod(string name)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<string>(CurrentProvider, ServiceName,"ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                });
        }
        public Task<string> ServerAsyncMethodAsync(string name)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<string>(CurrentProvider, ServiceName,"ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                });
        }
        public SignalGoTest2.Models.ArticleInfo AddArticle(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.ArticleInfo>(CurrentProvider, ServiceName,"AddArticle", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
        }
        public Task<SignalGoTest2.Models.ArticleInfo> AddArticleAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.ArticleInfo>(CurrentProvider, ServiceName,"AddArticle", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
        }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo> AddArticleMessage(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(CurrentProvider, ServiceName,"AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
        }
        public Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>> AddArticleMessageAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(CurrentProvider, ServiceName,"AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
        }
        public System.Tuple<bool> Logout(string yourName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<System.Tuple<bool>>(CurrentProvider, ServiceName,"Logout", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
        }
        public Task<System.Tuple<bool>> LogoutAsync(string yourName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<System.Tuple<bool>>(CurrentProvider, ServiceName,"Logout", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
        }
    }
    [ServiceContract("authenticationserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class AuthenticationService : IAuthenticationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public AuthenticationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo> Login(string userName, string password)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
        }
        public Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>> LoginAsync(string userName, string password)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
        }
        public string WhatIsMyName()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<string>(CurrentProvider, ServiceName,"WhatIsMyName", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<string> WhatIsMyNameAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<string>(CurrentProvider, ServiceName,"WhatIsMyName", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public SignalGoTest2.Models.MessageContract AdminAccess()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"AdminAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<SignalGoTest2.Models.MessageContract> AdminAccessAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"AdminAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public SignalGoTest2.Models.MessageContract UserAccess()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"UserAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<SignalGoTest2.Models.MessageContract> UserAccessAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"UserAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public SignalGoTest2.Models.MessageContract GustAccess()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"GustAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<SignalGoTest2.Models.MessageContract> GustAccessAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"GustAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksSync()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"TestCallbacksSync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<SignalGoTest2.Models.MessageContract> TestCallbacksSyncAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"TestCallbacksSync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksAsync()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"TestCallbacksAsync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public Task<SignalGoTest2.Models.MessageContract> TestCallbacksAsyncAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<SignalGoTest2.Models.MessageContract>(CurrentProvider, ServiceName,"TestCallbacksAsync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
}

namespace SignalGoTest2Services.StreamServices
{
    [ServiceContract("testserverstreammodelstreamservice",ServiceType.StreamService, InstanceType.SingleInstance)]
    public partial class TestServerStreamModel : ITestServerStreamModel
    {
        public string ServerAddress { get; set; }
        public int? Port { get; set; }
        private string ServiceName { get; set; }

        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        public TestServerStreamModel(SignalGo.Client.ClientProvider clientProvider = null)
        {
            CurrentProvider = clientProvider;
            ServiceName = GetType().GetServerServiceName(true);
        }

        public TestServerStreamModel(string serverAddress = null, int? port = null, SignalGo.Client.ClientProvider clientProvider = null)
        {
            ServerAddress = serverAddress;
            Port = port;
            CurrentProvider = clientProvider;
            ServiceName = GetType().GetServerServiceName(true);
        }
        public SignalGo.Shared.Models.StreamInfo<string> DownloadImage(string name, SignalGoTest2.Models.TestStreamModel testStreamModel)
        {
                return  SignalGo.Client.ClientProvider.UploadStreamSync<SignalGo.Shared.Models.StreamInfo<string>>(CurrentProvider, ServerAddress, Port, ServiceName ,"DownloadImage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(testStreamModel),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(testStreamModel) },
                }, null);
        }
        public Task<SignalGo.Shared.Models.StreamInfo<string>> DownloadImageAsync(string name, SignalGoTest2.Models.TestStreamModel testStreamModel)
        {
                return SignalGo.Client.ClientProvider.UploadStreamAsync<SignalGo.Shared.Models.StreamInfo<string>>(CurrentProvider, ServerAddress, Port, ServiceName ,"DownloadImage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(testStreamModel),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(testStreamModel) },
                }, null);
        }
        public string UploadImage(string name, SignalGo.Shared.Models.StreamInfo streamInfo, SignalGoTest2.Models.TestStreamModel testStreamModel)
        {
                return  SignalGo.Client.ClientProvider.UploadStreamSync<string>(CurrentProvider, ServerAddress, Port, ServiceName ,"UploadImage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(streamInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(streamInfo) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(testStreamModel),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(testStreamModel) },
                }, streamInfo);
        }
        public Task<string> UploadImageAsync(string name, SignalGo.Shared.Models.StreamInfo streamInfo, SignalGoTest2.Models.TestStreamModel testStreamModel)
        {
                return SignalGo.Client.ClientProvider.UploadStreamAsync<string>(CurrentProvider, ServerAddress, Port, ServiceName ,"UploadImage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(streamInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(streamInfo) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(testStreamModel),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(testStreamModel) },
                }, streamInfo);
        }
    }
}

namespace SignalGoTest2Services.OneWayServices
{
    [ServiceContract("testservermodelonewayservice",ServiceType.OneWayService, InstanceType.SingleInstance)]
    public partial class TestServerModel : ITestServerModel
    {
        public static TestServerModel Current { get; set; }
        string _signalGoServerAddress = "";
        int _signalGoPortNumber = 0;
        public TestServerModel(string signalGoServerAddress, int signalGoPortNumber)
        {
            _signalGoServerAddress = signalGoServerAddress;
            _signalGoPortNumber = signalGoPortNumber;
        }
        public string HelloWorld(string yourName)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<string>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "HelloWorld", new SignalGo.Shared.Models.ParameterInfo() {  Name = "yourName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) });
        }
        public Task<string> HelloWorldAsync(string yourName)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<string>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "HelloWorld", new SignalGo.Shared.Models.ParameterInfo() {  Name = "yourName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsers()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetListOfUsers");
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetListOfUsers");
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetPostsOfUser(int userId)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userId", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetPostsOfUserAsync(int userId)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userId", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) });
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsersCustom()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetListOfUsersCustom");
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersCustomAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetListOfUsersCustom");
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetCustomPostsOfUser(int userId)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userId", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) });
        }
        public Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetCustomPostsOfUserAsync(int userId)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userId", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) });
        }
        public bool HelloBind(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<bool>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "HelloBind", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest2", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest3", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) });
        }
        public Task<bool> HelloBindAsync(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<bool>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "HelloBind", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest2", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest3", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) });
        }
        public bool Login(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<bool>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "Login", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) });
        }
        public Task<bool> LoginAsync(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<bool>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "Login", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userInfoTest", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) });
        }
        public string ServerAsyncMethod(string name)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<string>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo() {  Name = "name", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) });
        }
        public Task<string> ServerAsyncMethodAsync(string name)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<string>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo() {  Name = "name", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) });
        }
        public SignalGoTest2.Models.ArticleInfo AddArticle(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.ArticleInfo>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "AddArticle", new SignalGo.Shared.Models.ParameterInfo() {  Name = "articleInfo", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) });
        }
        public Task<SignalGoTest2.Models.ArticleInfo> AddArticleAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.ArticleInfo>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "AddArticle", new SignalGo.Shared.Models.ParameterInfo() {  Name = "articleInfo", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) });
        }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo> AddArticleMessage(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo() {  Name = "articleInfo", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) });
        }
        public Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>> AddArticleMessageAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo() {  Name = "articleInfo", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) });
        }
        public System.Tuple<bool> Logout(string yourName)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<System.Tuple<bool>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "Logout", new SignalGo.Shared.Models.ParameterInfo() {  Name = "yourName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) });
        }
        public Task<System.Tuple<bool>> LogoutAsync(string yourName)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<System.Tuple<bool>>(_signalGoServerAddress, _signalGoPortNumber, "testservermodelonewayservice", "Logout", new SignalGo.Shared.Models.ParameterInfo() {  Name = "yourName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) });
        }
    }
    [ServiceContract("authenticationonewayservice",ServiceType.OneWayService, InstanceType.SingleInstance)]
    public partial class AuthenticationService : IAuthenticationService
    {
        public static AuthenticationService Current { get; set; }
        string _signalGoServerAddress = "";
        int _signalGoPortNumber = 0;
        public AuthenticationService(string signalGoServerAddress, int signalGoPortNumber)
        {
            _signalGoServerAddress = signalGoServerAddress;
            _signalGoPortNumber = signalGoPortNumber;
        }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo> Login(string userName, string password)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "Login", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "password", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) });
        }
        public Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>> LoginAsync(string userName, string password)
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "Login", new SignalGo.Shared.Models.ParameterInfo() {  Name = "userName", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) }, new SignalGo.Shared.Models.ParameterInfo() {  Name = "password", Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) });
        }
        public string WhatIsMyName()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<string>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "WhatIsMyName");
        }
        public Task<string> WhatIsMyNameAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<string>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "WhatIsMyName");
        }
        public SignalGoTest2.Models.MessageContract AdminAccess()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "AdminAccess");
        }
        public Task<SignalGoTest2.Models.MessageContract> AdminAccessAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "AdminAccess");
        }
        public SignalGoTest2.Models.MessageContract UserAccess()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "UserAccess");
        }
        public Task<SignalGoTest2.Models.MessageContract> UserAccessAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "UserAccess");
        }
        public SignalGoTest2.Models.MessageContract GustAccess()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "GustAccess");
        }
        public Task<SignalGoTest2.Models.MessageContract> GustAccessAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "GustAccess");
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksSync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "TestCallbacksSync");
        }
        public Task<SignalGoTest2.Models.MessageContract> TestCallbacksSyncAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "TestCallbacksSync");
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethod<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "TestCallbacksAsync");
        }
        public Task<SignalGoTest2.Models.MessageContract> TestCallbacksAsyncAsync()
        {
                return SignalGo.Client.ClientProvider.SendOneWayMethodAsync<SignalGoTest2.Models.MessageContract>(_signalGoServerAddress, _signalGoPortNumber, "authenticationonewayservice", "TestCallbacksAsync");
        }
    }
}

namespace SignalGoTest2Services.HttpServices
{
    public partial class TestServerModel : ITestServerModel
    {
        public TestServerModel(string serverUrl, SignalGo.Client.HttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.HttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static TestServerModel Current { get; set; }
        public string HelloWorld(string yourName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/HelloWorld", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public async Task<string> HelloWorldAsync(string yourName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/HelloWorld", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsers()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetListOfUsers", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(result.Data);
        }
        public async Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetListOfUsers", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(result.Data);
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetPostsOfUser(int userId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(result.Data);
        }
        public async Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetPostsOfUserAsync(int userId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(result.Data);
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest> GetListOfUsersCustom()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetListOfUsersCustom", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(result.Data);
        }
        public async Task<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>> GetListOfUsersCustomAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetListOfUsersCustom", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.UserInfoTest>>(result.Data);
        }
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> GetCustomPostsOfUser(int userId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(result.Data);
        }
        public async Task<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>> GetCustomPostsOfUserAsync(int userId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/GetCustomPostsOfUser", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest>>(result.Data);
        }
        public bool HelloBind(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/HelloBind", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest2),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest3),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<bool>(result.Data);
        }
        public async Task<bool> HelloBindAsync(SignalGoTest2.Models.UserInfoTest userInfoTest, SignalGoTest2.Models.UserInfoTest userInfoTest2, SignalGoTest2.Models.UserInfoTest userInfoTest3)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/HelloBind", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest2),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest2) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest3),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest3) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<bool>(result.Data);
        }
        public bool Login(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<bool>(result.Data);
        }
        public async Task<bool> LoginAsync(SignalGoTest2.Models.UserInfoTest userInfoTest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userInfoTest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userInfoTest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<bool>(result.Data);
        }
        public string ServerAsyncMethod(string name)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public async Task<string> ServerAsyncMethodAsync(string name)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/ServerAsyncMethod", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(name),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(name) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public SignalGoTest2.Models.ArticleInfo AddArticle(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/AddArticle", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.ArticleInfo>(result.Data);
        }
        public async Task<SignalGoTest2.Models.ArticleInfo> AddArticleAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/AddArticle", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.ArticleInfo>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo> AddArticleMessage(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>> AddArticleMessageAsync(SignalGoTest2.Models.ArticleInfo articleInfo)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/AddArticleMessage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(articleInfo),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(articleInfo) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.ArticleInfo>>(result.Data);
        }
        public System.Tuple<bool> Logout(string yourName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/Logout", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Tuple<bool>>(result.Data);
        }
        public async Task<System.Tuple<bool>> LogoutAsync(string yourName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "testservermodel/Logout", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(yourName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(yourName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<System.Tuple<bool>>(result.Data);
        }
    }
    public partial class AuthenticationService : IAuthenticationService
    {
        public AuthenticationService(string serverUrl, SignalGo.Client.HttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.HttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static AuthenticationService Current { get; set; }
        public SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo> Login(string userName, string password)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>> LoginAsync(string userName, string password)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract<SignalGoTest2.Models.UserInfo>>(result.Data);
        }
        public string WhatIsMyName()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/WhatIsMyName", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public async Task<string> WhatIsMyNameAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/WhatIsMyName", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<string>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract AdminAccess()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/AdminAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract> AdminAccessAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/AdminAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract UserAccess()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/UserAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract> UserAccessAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/UserAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract GustAccess()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/GustAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract> GustAccessAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/GustAccess", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksSync()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/TestCallbacksSync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract> TestCallbacksSyncAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/TestCallbacksSync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public SignalGoTest2.Models.MessageContract TestCallbacksAsync()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/TestCallbacksAsync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
        public async Task<SignalGoTest2.Models.MessageContract> TestCallbacksAsyncAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/TestCallbacksAsync", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return SignalGo.Client.ClientSerializationHelper.DeserializeObject<SignalGoTest2.Models.MessageContract>(result.Data);
        }
    }
}

namespace SignalGoTest2Services.ClientServices
{
    [ServiceContract("testservermodelclientservice", ServiceType.ClientService, InstanceType.SingleInstance)]
    public partial interface ITestClientServiceModel
    {
        string HelloWorld(string yourName);
        string HelloWorld2(string yourName);
        string TestMethod(string param1, string param2);
        string TestMethod2(string param1, string param2);
    }
}

namespace SignalGoTest2.Models
{
    public partial class TestStreamModel : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private System.Collections.Generic.List<string> _Values;
        public System.Collections.Generic.List<string> Values
        {
                get
                {
                        return _Values;
                }
                set
                {
                        _Values = value;
                        OnPropertyChanged(nameof(Values));
                }
        }


    }

    public partial class UserInfoTest : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private int _Id;
        public int Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Username;
        public string Username
        {
                get
                {
                        return _Username;
                }
                set
                {
                        _Username = value;
                        OnPropertyChanged(nameof(Username));
                }
        }

        private string _Password;
        public string Password
        {
                get
                {
                        return _Password;
                }
                set
                {
                        _Password = value;
                        OnPropertyChanged(nameof(Password));
                }
        }

        private int _Age;
        public int Age
        {
                get
                {
                        return _Age;
                }
                set
                {
                        _Age = value;
                        OnPropertyChanged(nameof(Age));
                }
        }

        private System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> _PostInfoes;
        public System.Collections.Generic.List<SignalGoTest2.Models.PostInfoTest> PostInfoes
        {
                get
                {
                        return _PostInfoes;
                }
                set
                {
                        _PostInfoes = value;
                        OnPropertyChanged(nameof(PostInfoes));
                }
        }

        private System.Collections.Generic.List<SignalGoTest2.Models.RoleInfoTest> _RoleInfoes;
        public System.Collections.Generic.List<SignalGoTest2.Models.RoleInfoTest> RoleInfoes
        {
                get
                {
                        return _RoleInfoes;
                }
                set
                {
                        _RoleInfoes = value;
                        OnPropertyChanged(nameof(RoleInfoes));
                }
        }

        private SignalGoTest2.Models.PostInfoTest _LastPostInfo;
        public SignalGoTest2.Models.PostInfoTest LastPostInfo
        {
                get
                {
                        return _LastPostInfo;
                }
                set
                {
                        _LastPostInfo = value;
                        OnPropertyChanged(nameof(LastPostInfo));
                }
        }


    }

    public partial class PostInfoTest : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private int _Id;
        public int Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Title;
        public string Title
        {
                get
                {
                        return _Title;
                }
                set
                {
                        _Title = value;
                        OnPropertyChanged(nameof(Title));
                }
        }

        private string _Text;
        public string Text
        {
                get
                {
                        return _Text;
                }
                set
                {
                        _Text = value;
                        OnPropertyChanged(nameof(Text));
                }
        }

        private string _PostSecurityLink;
        public string PostSecurityLink
        {
                get
                {
                        return _PostSecurityLink;
                }
                set
                {
                        _PostSecurityLink = value;
                        OnPropertyChanged(nameof(PostSecurityLink));
                }
        }

        private SignalGoTest2.Models.UserInfoTest _User;
        public SignalGoTest2.Models.UserInfoTest User
        {
                get
                {
                        return _User;
                }
                set
                {
                        _User = value;
                        OnPropertyChanged(nameof(User));
                }
        }

        private SignalGoTest2.Models.RoleInfoTest _PostRoleToSee;
        public SignalGoTest2.Models.RoleInfoTest PostRoleToSee
        {
                get
                {
                        return _PostRoleToSee;
                }
                set
                {
                        _PostRoleToSee = value;
                        OnPropertyChanged(nameof(PostRoleToSee));
                }
        }


    }

    public partial class ArticleInfo : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private string _Detail;
        public string Detail
        {
                get
                {
                        return _Detail;
                }
                set
                {
                        _Detail = value;
                        OnPropertyChanged(nameof(Detail));
                }
        }

        private System.DateTime? _CreatedDateTime;
        public System.DateTime? CreatedDateTime
        {
                get
                {
                        return _CreatedDateTime;
                }
                set
                {
                        _CreatedDateTime = value;
                        OnPropertyChanged(nameof(CreatedDateTime));
                }
        }


    }

    public partial class MessageContract<T> : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private T _Data;
        public T Data
        {
                get
                {
                        return _Data;
                }
                set
                {
                        _Data = value;
                        OnPropertyChanged(nameof(Data));
                }
        }

        private bool _IsSuccess;
        public bool IsSuccess
        {
                get
                {
                        return _IsSuccess;
                }
                set
                {
                        _IsSuccess = value;
                        OnPropertyChanged(nameof(IsSuccess));
                }
        }

        private System.Collections.Generic.List<SignalGoTest2.Models.ValidationRule> _Errors;
        public System.Collections.Generic.List<SignalGoTest2.Models.ValidationRule> Errors
        {
                get
                {
                        return _Errors;
                }
                set
                {
                        _Errors = value;
                        OnPropertyChanged(nameof(Errors));
                }
        }

        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }


    }

    public partial class UserInfo : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private int _Id;
        public int Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _FullName;
        public string FullName
        {
                get
                {
                        return _FullName;
                }
                set
                {
                        _FullName = value;
                        OnPropertyChanged(nameof(FullName));
                }
        }

        private string _UserName;
        public string UserName
        {
                get
                {
                        return _UserName;
                }
                set
                {
                        _UserName = value;
                        OnPropertyChanged(nameof(UserName));
                }
        }

        private string _Password;
        public string Password
        {
                get
                {
                        return _Password;
                }
                set
                {
                        _Password = value;
                        OnPropertyChanged(nameof(Password));
                }
        }

        private bool _IsAdmin;
        public bool IsAdmin
        {
                get
                {
                        return _IsAdmin;
                }
                set
                {
                        _IsAdmin = value;
                        OnPropertyChanged(nameof(IsAdmin));
                }
        }

        private bool _IsUser;
        public bool IsUser
        {
                get
                {
                        return _IsUser;
                }
                set
                {
                        _IsUser = value;
                        OnPropertyChanged(nameof(IsUser));
                }
        }


    }

    public partial class MessageContract : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private bool _IsSuccess;
        public bool IsSuccess
        {
                get
                {
                        return _IsSuccess;
                }
                set
                {
                        _IsSuccess = value;
                        OnPropertyChanged(nameof(IsSuccess));
                }
        }

        private System.Collections.Generic.List<SignalGoTest2.Models.ValidationRule> _Errors;
        public System.Collections.Generic.List<SignalGoTest2.Models.ValidationRule> Errors
        {
                get
                {
                        return _Errors;
                }
                set
                {
                        _Errors = value;
                        OnPropertyChanged(nameof(Errors));
                }
        }

        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }


    }

    public partial class RoleInfoTest : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private int _Id;
        public int Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private SignalGoTest2.Models.RoleTypeTest _Type;
        public SignalGoTest2.Models.RoleTypeTest Type
        {
                get
                {
                        return _Type;
                }
                set
                {
                        _Type = value;
                        OnPropertyChanged(nameof(Type));
                }
        }

        private SignalGoTest2.Models.UserInfoTest _User;
        public SignalGoTest2.Models.UserInfoTest User
        {
                get
                {
                        return _User;
                }
                set
                {
                        _User = value;
                        OnPropertyChanged(nameof(User));
                }
        }


    }

    public partial class ValidationRule : SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }


    }

}

namespace SignalGoTest2.Models
{
    public enum RoleTypeTest : int
    {
        Normal = 0,
        Admin = 1,
        Editor = 2,
        Viewer = 3,
    }

}

